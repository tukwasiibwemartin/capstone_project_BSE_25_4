name: Staging CI/CD

on:
  push:
    branches: [ "staging" ]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: '8.2'

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: composer install --no-interaction --no-progress --prefer-dist --no-scripts

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Directory Permissions (safer)
        run: chmod -R u+w,g+w storage bootstrap/cache

      - name: Run migrations
        env:
          DB_CONNECTION: pgsql
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_URL: ${{ secrets.SDB_URL }}
        run: php artisan migrate --force

      - name: Seed the database
        env:
          DB_CONNECTION: pgsql
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_URL: ${{ secrets.SDB_URL }}
        run: php artisan db:seed --force

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install NPM Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
        env:
          DB_CONNECTION: pgsql
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_URL: ${{ secrets.SDB_URL }}
        run: php artisan test

      - name: PHP Quality Code Check
        run: |
          ./vendor/bin/php-cs-fixer fix --dry-run --diff

      - name: JavaScript Linting
        run: |
          npx eslint resources/js --ext .js,.vue --ignore-pattern "*.min.js" --max-warnings=0

  deploy:
    needs: tests
    runs-on: ubuntu-latest
    if: needs.tests.result == 'success'
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.SVERCEL_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install NPM Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
