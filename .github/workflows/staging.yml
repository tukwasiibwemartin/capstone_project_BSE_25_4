name: Deploy to Staging

on:
  push:
    branches: [ "staging" ]

jobs:
  prepare-database:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: composer install --no-interaction --no-progress --prefer-dist --no-scripts

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Run migrations on Staging DB
        env:
          DB_CONNECTION: pgsql
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_URL: ${{ secrets.DB_URL }}
        run: php artisan migrate --force

      - name: Seed the staging database
        env:
          DB_CONNECTION: pgsql
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_URL: ${{ secrets.DB_URL }}
        run: php artisan db:seed --force

  deploy:
    needs: prepare-database
    runs-on: ubuntu-latest
    if: needs.prepare-database.result == 'success'
    environment:
      name: staging
      url: https://capstonestaging.vercel.app
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install NPM Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel Preview (Staging)
        run: |
          vercel deploy \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --env DB_URL=${{ secrets.DB_URL }} \
            --env DB_PORT=${{ secrets.DB_PORT }} \
            --yes > deployment-url.txt

      - name: Get Deployment URL
        id: deployment
        run: echo "url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT

      - name: Comment Deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ' Staging deployment ready at: ${{ steps.deployment.outputs.url }}'
            })
